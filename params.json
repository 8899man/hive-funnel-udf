{"name":"Hive-funnel-udf","tagline":"Hive UDFs for funnel analysis","body":"# Hive Funnel Analysis UDFs\r\n\r\n[Funnel analysis](https://en.wikipedia.org/wiki/Funnel_analysis) is a method for\r\ntracking user conversion rates across actions. This enables detection of actions\r\ncausing high user fallout.\r\n\r\nThese Hive UDFs enables funnel analysis to be performed simply and easily on any\r\nHive table.\r\n\r\n## Requirements\r\n\r\n[Maven](https://maven.apache.org/index.html) is required to build the funnel\r\nUDF.\r\n\r\n## How to build\r\n\r\nThere is a provided `Makefile` with all the build targets.\r\n\r\n### Build JAR\r\n\r\n```bash\r\nmake jar\r\n```\r\n\r\nThis creates a `funnel.jar` in the `target/` directory.\r\n\r\n### Register JAR with Hive\r\n\r\nTo use the funnel UDFs, you need to register it with Hive.\r\n\r\nWith temporary functions:\r\n\r\n```sql\r\nADD JAR funnel.jar;\r\nCREATE TEMPORARY FUNCTION funnel         AS 'com.yahoo.hive.udf.funnel.Funnel';\r\nCREATE TEMPORARY FUNCTION funnel_merge   AS 'com.yahoo.hive.udf.funnel.Merge';\r\nCREATE TEMPORARY FUNCTION funnel_percent AS 'com.yahoo.hive.udf.funnel.Percent';\r\n```\r\n\r\nWith permenant functions you need to put the JAR on HDFS, and it will be registered with a database (you have to replace `DATABASE` and `PATH_TO_JAR` with your values):\r\n\r\n```sql\r\nCREATE FUNCTION DATABASE.funnel         AS 'com.yahoo.hive.udf.funnel.Funnel'  USING JAR 'hdfs:///PATH_TO_JAR/funnel.jar';\r\nCREATE FUNCTION DATABASE.funnel_merge   AS 'com.yahoo.hive.udf.funnel.Merge'   USING JAR 'hdfs:///PATH_TO_JAR/funnel.jar';\r\nCREATE FUNCTION DATABASE.funnel_percent AS 'com.yahoo.hive.udf.funnel.Percent' USING JAR 'hdfs:///PATH_TO_JAR/funnel.jar';\r\n```\r\n\r\n## How to use\r\n\r\nThere are three funnel UDFs provided: [`funnel`](#funnel),\r\n[`funnel_merge`](#funnel_merge), [`funnel_percent`](#funnel_percent).\r\n\r\nThe [`funnel`](#funnel) UDF outputs an array of longs showing conversion rates\r\nacross the provided funnels. \r\n\r\nThe [`funnel_merge`](#funnel_merge) UDF merges multiple arrays of longs by\r\nadding them together.\r\n\r\nThe [`funnel_percent`](#funnel_percent) UDF takes a raw count funnel result and\r\nconverts it to a percent change count.\r\n\r\nThere is no need to sort the data on timestamp, the UDF will take care of it. If\r\nthere is a collision in the timestamps, it then sorts on the action column.\r\n\r\n### `funnel`\r\n`funnel(action_column, timestamp_column, array(funnel_1), array(funnel_2), ...)`\r\n  - Builds a funnel report applied to the `action_column`, sorted by the\r\n    `timestamp_column`.\r\n  - The funnels are arrays of the same type as the `action` column. This allows\r\n    for multiple matches to move to the next funnel.\r\n    - For example, funnel_1 could be `array('register_button',\r\n      'facebook_invite_register')`. The funnel will match the first occurence\r\n      of either of these actions and proceed to the next funnel.\r\n  - You can have an arbitrary number of funnels.\r\n  - The `timestamp_column` can be of any comparable type (Strings, Integers,\r\n    Dates, etc).\r\n\r\n### `funnel_merge`\r\n`funnel_merge(funnel_column)`\r\n  - Merges funnels. Use with funnel UDF.\r\n\r\n### `funnel_percent`\r\n`funnel_percent(funnel_column)`\r\n  - Converts the result of a [`funnel_merge`](#funnel_merge) to percent change.\r\n    Use with funnel and funnel_merge UDF.\r\n  - For example, a result from [`funnel_merge`](#funnel_merge) could look like\r\n    `[245, 110, 54, 13]`. This is result is in raw counts. If we pass this\r\n    through [`funnel_percent`](#funnel_percent) then it would look like `[1.0,\r\n    0.44, 0.49, 0.24]`.\r\n\r\n### Examples\r\n\r\nAssume a table `user_data`:\r\n\r\n| action              | timestamp | user_id | gender |\r\n|---------------------|-----------|---------|--------|\r\n| signup_page         | 100       | 1       | f      |\r\n| confirm_button      | 200       | 1       | f      |\r\n| submit_button       | 300       | 1       | f      |\r\n| signup_page         | 200       | 2       | m      |\r\n| submit_button       | 400       | 2       | m      |\r\n| signup_page         | 100       | 3       | f      |\r\n| confirm_button      | 200       | 3       | f      |\r\n| decline             | 200       | 3       | f      |\r\n| ...                 | ...       | ...     | ...    |\r\n\r\n#### Simple funnel: `(signup OR email_signup) -> confirm -> submit`\r\n\r\n```sql\r\nSELECT funnel_merge(funnel)\r\nFROM (SELECT funnel(action, timestamp, array('signup_page', 'email_signup'), \r\n                                       array('confirm_button'),\r\n                                       array('submit_button')) AS funnel\r\n      FROM user_data\r\n      GROUP BY user_id) t1;\r\n```\r\n\r\nResult: `[3, 2, 1]`\r\n\r\n#### Simple funnel with percent: `signup -> confirm -> submit`\r\n\r\n```sql\r\nSELECT funnel_percent(funnel_merge(funnel))\r\nFROM (SELECT funnel(action, timestamp, array('signup_page'), \r\n                                       array('confirm_button'),\r\n                                       array('submit_button')) AS funnel\r\n      FROM user_data\r\n      GROUP BY user_id) t1;\r\n```\r\n\r\nResult: `[1.0, 0.66, 0.5]`\r\n\r\n#### Funnel with multiple groups: `signup -> confirm -> submit` by gender\r\n\r\n```sql\r\nSELECT gender, funnel_merge(funnel)\r\nFROM (SELECT gender,\r\n             funnel(action, timestamp, array('signup_page'),\r\n                                       array('confirm_button'),\r\n                                       array('submit_button')) AS funnel\r\n      FROM table\r\n      GROUP BY user_id, gender) t1;\r\n```\r\n\r\nResult: `m: [1, 0, 0], f: [2, 2, 1]`\r\n\r\n#### Multiple parallel funnels: `signup -> confirm -> submit` and `signup -> decline`\r\n\r\n```sql\r\nSELECT funnel_merge(funnel1), funnel_merge(funnel2)\r\nFROM (SELECT funnel(action, timestamp, array('signup_page'),\r\n                                       array('confirm_button'),\r\n                                       array('submit_button')) AS funnel1\r\n             funnel(action, timestamp, array('signup_page'),\r\n                                       array('decline')) AS funnel2\r\n      FROM table\r\n      GROUP BY user_id) t1;\r\n```\r\n\r\nResult: `[3, 2, 1] [3, 1]`\r\n\r\n## License\r\n\r\n[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}